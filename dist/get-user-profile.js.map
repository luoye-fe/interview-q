{"version":3,"file":null,"sources":["../src/debounce.js","../src/cache.js","../src/event-bus.js","../src/app.js"],"sourcesContent":["// promise 版 节流函数\nexport default function debounce(func, wait, immediate) {\n\tlet timeout;\n\treturn function() {\n\t\tconst _this = this;\n\t\tconst args = arguments;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfunction later() {\n\t\t\t\ttimeout = null;\n\t\t\t\tif (!immediate) resolve(func.apply(_this, args));\n\t\t\t};\n\t\t\tconst callNow = immediate && !timeout;\n\t\t\tclearTimeout(timeout);\n\t\t\ttimeout = setTimeout(later, wait);\n\t\t\tif (callNow) resolve(func.apply(_this, args));\n\t\t});\n\t};\n};\n","// 缓存\nclass Cache {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t\tthis.cacheMs = this.options.cacheMs || 60 * 1000; // 默认缓存时间一分钟\n\t\tthis.cache = {};\n\t}\n\tset(key, value, ms) { // ms 可单独设置缓存时间\n\t\tthis.cache[key] = {\n\t\t\tval: value,\n\t\t\tsetTime: Date.now(),\n\t\t\tcacheTime: ms || this.cacheMs\n\t\t};\n\t}\n\tget(key) {\n\t\tthis.check(key);\n\t\treturn this.cache[key] ? this.cache[key].val : null;\n\t}\n\tdelete(key) {\n\t\tdelete this.cache[key];\n\t}\n\tcheck(key) {\n\t\t// 检测是否过期，过期了删除\n\t\tlet cur = this.cache[key];\n\t\tif (cur && (Date.now() - cur.setTime) > cur.cacheTime) this.delete(key);\n\t}\n}\n\nexport default Cache;\n","// 事件广播\nclass EventBus {\n\tconstructor() {\n\t\tthis.cache = {};\n\t}\n\ton(key, func) {\n\t\t(this.cache[key] || (this.cache[key] = [])).push(func);\n\t}\n\tonce(key, func) {\n\t\tfunction on() {\n\t\t\tthis.off(key, on);\n\t\t\tfunc.apply(this, arguments);\n\t\t}\n\t\tthis.on(key, on);\n\t}\n\toff(key) {\n\t\tthis.cache[key] = null;\n\t}\n\temit(key) {\n\t\tconst args = [...arguments];\n\t\targs.shift();\n\t\tconst stack = this.cache[key];\n\t\tif (stack && stack.length > 0) {\n\t\t\tstack.forEach(item => {\n\t\t\t\titem.apply(this, args);\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport default EventBus;\n","/*\n * 基本：先用节流函数将在设定时间间隔内的请求收集起来一起执行，多余100个的请求先处理100个，剩下的递归调用，每次处理100个，获取数据完毕之后用广播机制告知每个调用者相对应的数据，\n * 进一步：本地缓存一份已知的 profile list，设定缓存时间，缓存时间内不发起真实请求，从本地取\n * 再进一步：ES6 来实现\n * 再再进一步：模块化，eventBus 和 cache 可以封装起来，最后 export 一个函数，调用时 import 即可\n * 再再再进一步：rollup 构建，umd 模式，支持所有调用方式\n */\n\nimport debounce from './debounce.js';\nimport Cache from './cache.js';\nimport EventBus from './event-bus.js';\n\n// 现在有一个 Ajax 接口，根据用户 uid 获取用户 profile 信息，是一个批量接口。我把这个 ajax 请求封装成以下的异步函数\nvar requestUserProfile = function(uidList) { // uidList 是一个数组，最大接受 100 个 uid\n\tconsole.log('走接口啦', uidList.toString());\n\t// 这个方法的实现不能修改\n\n\t/** 先去重 */\n\tvar uidList = uidList || [];\n\tvar _tmp = {};\n\tvar _uidList = [];\n\tuidList.forEach(function(uid) {\n\t\tif (!_tmp[uid]) {\n\t\t\t_tmp[uid] = 1;\n\t\t\t_uidList.push(uid);\n\t\t}\n\t});\n\t_tmp = null;\n\tuidList = null;\n\n\treturn Promise.resolve().then(function() {\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tsetTimeout(function() { // 模拟 ajax 异步，1s 返回\n\t\t\t\tresolve();\n\t\t\t}, 1000);\n\t\t}).then(function() {\n\t\t\tvar profileList = _uidList.map(function(uid) {\n\t\t\t\tif (uid < 0) { // 模拟 uid 传错，服务端异常，获取不到部分 uid 对应的 profile 等异常场景\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tuid: uid,\n\t\t\t\t\t\tnick: uid + 'Nick',\n\t\t\t\t\t\tage: 18\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn profileList.filter(function(profile) {\n\t\t\t\treturn profile !== null;\n\t\t\t});\n\t\t});\n\t});\n};\n\n// 现在我们有很多业务都需要根据 uid 获取 userProfile , 大多数业务的需求都是给一个 uid，获取 profile 。为了性能，我们需要把这个单个的请求合并成批量请求。\n\n// 例如，现在页面上 A 模块需要获取 uid 为 1 的 profile，B 模块需要 uid 为 2 的 profile， C 模块需要获取 uid 为 1 的profile\n// 这三个模块会单独调用下面这个方法获取 profile，假设这三次调用的时间非常接近(100ms 以内)，最终要求只发送一个 ajax 请求（只调用一次 requestUserProfile )，拿到这三个模块需要的 profile\n\n// 完成以下方法，接收一个参数 uid，返回一个 Promise，当成功请求到 profile 的时候， resolve 对应的profile , 请求失败 reject\n// 例如  getUserProfile(1).then(function(profile){ console.log(profile.uid === 1) // true });  // 假设请求成功了。\n\nclass TaskQ {\n\tconstructor() {\n\t\tthis.queue = []; // id 列表\n\t\tthis.debounceRun = debounce(this.runRealReQuest, 100);\n\t\tthis.extraQueue = []; // 100个以外的 id 列表\n\t}\n\tadd(id) {\n\t\t// 防止重复\n\t\tif (this.queue.indexOf(id) === -1) {\n\t\t\tif (this.queue.length >= 100) { // 多余 100 个的请求先放到一个数组中\n\t\t\t\tthis.extraQueue.push(id);\n\t\t\t} else {\n\t\t\t\tthis.queue.push(id);\n\t\t\t}\n\t\t};\n\t\tthis.run();\n\t}\n\trun() {\n\t\t// 执行 debounceRun\n\t\tthis.debounceRun()\n\t\t\t.then(profiles => {\n\t\t\t\t// 完成数据请求\n\t\t\t\tthis.loop(profiles);\n\t\t\t});\n\t}\n\tloop(profiles) {\n\t\t// 触发 'done' 事件，通知调用者执行回调\n\t\tProfileEventBus.emit('done', profiles);\n\t\tthis.queue = [];\n\t\t// 大于100个的请求递归调用，直到 extraQueue 里没有内容\n\t\tif (this.extraQueue.length) {\n\t\t\tthis.queue = this.extraQueue.splice(0, 100);\n\t\t\tthis.run();\n\t\t}\n\t}\n\trunRealReQuest() {\n\t\t// 获取数据，走缓存或者走接口\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet result = [];\n\t\t\tlet curQueue = [...this.queue];\n\t\t\tfor (let i in this.queue) {\n\t\t\t\t// 从缓存中取\n\t\t\t\tlet cur = ProfileCache.get(this.queue[i]);\n\t\t\t\tif (cur) {\n\t\t\t\t\tresult.push(cur);\n\t\t\t\t\t// 有缓存的 uid 从备请求列表中删除\n\t\t\t\t\tcurQueue.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.queue = curQueue;\n\t\t\tif (this.queue.length) {\n\t\t\t\t// 请求真实接口\n\t\t\t\trequestUserProfile(this.queue)\n\t\t\t\t\t.then(profiles => {\n\t\t\t\t\t\tfor (let i in profiles) {\n\t\t\t\t\t\t\t// 设置缓存\n\t\t\t\t\t\t\tProfileCache.set(profiles[i].uid, profiles[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(result.concat(profiles));\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst ProfileEventBus = new EventBus();\nconst ProfileRequetTaskQ = new TaskQ();\nconst ProfileCache = new Cache();\n\n// 最后使用者调用的函数\nexport default function getUserProfile(id) {\n\treturn new Promise((resolve, reject) => {\n\t\t// 向队列中添加 id\n\t\tProfileRequetTaskQ.add(id);\n\t\t// 监听本次队列的 done 事件\n\t\tProfileEventBus.on('done', profiles => {\n\t\t\tfor (let i in profiles) {\n\t\t\t\t// uid 与 id 一致的 返回给调用者 (warning: uid 为 0 的时候！！！)\n\t\t\t\tif (profiles[i].uid !== undefined && profiles[i].uid === id) return resolve(profiles[i]);\n\t\t\t}\n\t\t});\n\t});\n}\n"],"names":["debounce","func","wait","immediate","timeout","_this","args","arguments","Promise","resolve","reject","later","apply","callNow","setTimeout","Cache","options","cacheMs","cache","key","value","ms","Date","now","check","val","cur","setTime","cacheTime","delete","EventBus","push","on","off","shift","stack","length","forEach","requestUserProfile","uidList","log","toString","_tmp","_uidList","uid","then","profileList","map","filter","profile","TaskQ","queue","debounceRun","runRealReQuest","extraQueue","id","indexOf","run","loop","profiles","emit","splice","result","curQueue","i","ProfileCache","get","set","concat","ProfileEventBus","ProfileRequetTaskQ","getUserProfile","add","undefined"],"mappings":"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"}